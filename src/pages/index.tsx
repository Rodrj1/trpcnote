import { type NextPage } from "next";
import { Header, NoteCard, NoteEditor, Topic } from "~/components";
import { useApiHandler } from "~/features/api";
import Head from "next/head";
import { useSession } from "next-auth/react";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>TRPC Note Maker</title>
        <meta name="Note Maker using T3" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="m-3">
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const {
    topics,
    createTopic,
    deleteTopic,
    notes,
    createNote,
    deleteNote,
    selectedTopic,
    setSelectedTopic,
  } = useApiHandler();

  return (
    <section className="flex flex-col items-center justify-center">
      {sessionData?.user !== undefined && (
        <>
          <input
            type="text"
            placeholder="New Topic"
            className="input-bordered input input-sm my-5 w-full md:w-auto lg:w-2/12"
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                createTopic.mutate({
                  title: e.currentTarget.value,
                });
                e.currentTarget.value = "";
              }
            }}
          />

          <div className="flex w-full flex-col items-start justify-center gap-3  lg:flex-row">
            <ul className="flex w-auto flex-col gap-2">
              {topics?.map((topic) => (
                <li key={topic?.id}>
                  <Topic
                    topic={topic}
                    selectedTopic={selectedTopic}
                    setSelectedTopic={setSelectedTopic}
                    onDelete={() =>
                      void deleteTopic.mutate({ topicId: topic.id })
                    }
                  />
                </li>
              ))}
            </ul>

            <div className="flex w-full flex-col md:w-auto">
              <NoteEditor
                onSave={({ title, content }) => {
                  void createNote.mutate({
                    title,
                    content,
                    topicId: selectedTopic?.id ?? "",
                  });
                }}
              />

              <ul>
                {notes?.map((note) => (
                  <li key={note.id}>
                    <NoteCard
                      note={note}
                      onDelete={() => void deleteNote.mutate({ id: note.id })}
                    />
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </>
      )}
    </section>
  );
};
